// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.1.3 (swiftlang-1100.0.282.1 clang-1100.0.33.15)
// swift-module-flags: -target arm64-apple-ios10.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Onone -module-name TekCoreNetwork
import Alamofire
import Foundation
import Swift
@_exported import TekCoreNetwork
public protocol TekoCodeProtocol {
  associatedtype ValueType : Swift.Decodable, Swift.Equatable
  var successCode: Self.ValueType { get }
  var code: Self.ValueType? { get }
  var message: Swift.String? { get }
  var error: Swift.Error? { get }
}
extension TekoCodeProtocol {
  public var isSuccess: Swift.Bool {
    get
  }
}
public enum NetworkError : Swift.Error, Foundation.LocalizedError {
  case cancelled
  case undefined(response: Swift.String?)
  case unableToDecode(dataContents: Swift.String?)
  case requestFailed(response: Swift.String?)
  case unauthorized
  case notFound
  public var code: Swift.String {
    get
  }
  public var errorDescription: Swift.String? {
    get
  }
}
public typealias CodeConformable = Swift.Decodable & TekCoreNetwork.TekoCodeProtocol
public protocol BaseResponseProtocol {
  associatedtype Code : Swift.Decodable, TekCoreNetwork.TekoCodeProtocol
  var code: Self.Code { get }
}
open class BaseResponse<Code> : Swift.Decodable, TekCoreNetwork.BaseResponseProtocol where Code : Swift.Decodable, Code : TekCoreNetwork.TekoCodeProtocol {
  final public let code: Code
  required public init(from decoder: Swift.Decoder) throws
  public init(code: Code)
  @objc deinit
}
public protocol CoreRequestProtocol {
  var method: TekCoreNetwork.APIMethod { get }
  var path: Swift.String { get }
  var hasToken: Swift.Bool { get }
  var headers: TekCoreNetwork.APIHeaders? { get }
}
extension CoreRequestProtocol {
  public var headers: TekCoreNetwork.APIHeaders? {
    get
  }
}
public struct RequestConfiguration : TekCoreNetwork.RequestConfigurationProtocol {
  public var mainURL: Foundation.URL
  public var accessToken: Swift.String?
  public var userAgent: Swift.String?
  public init(mainURL: Foundation.URL, accessToken: Swift.String? = nil, userAgent: Swift.String? = nil)
}
public typealias APIHeaders = Alamofire.HTTPHeaders
public typealias APIParameters = Alamofire.Parameters
public typealias APIParamEncoding = Alamofire.ParameterEncoding
public enum APIMethod : Swift.String {
  case get
  case post
  case put
  case patch
  case delete
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
public enum APIParamEncoder {
  case singleParams(_: TekCoreNetwork.APIParameters, encoding: TekCoreNetwork.APIParamEncoding)
  case multiParams(queryParams: TekCoreNetwork.APIParameters, bodyParams: TekCoreNetwork.APIParameters, bodyEncoding: TekCoreNetwork.APIParamEncoding)
  public func encode(_ urlRequest: Alamofire.URLRequestConvertible) throws -> Foundation.URLRequest
}
public enum URLParamEncoding : Alamofire.ParameterEncoding {
  case `default`
  case queryString
  case httpBody
  public func encode(_ urlRequest: Alamofire.URLRequestConvertible, with parameters: Alamofire.Parameters?) throws -> Foundation.URLRequest
  public static func == (a: TekCoreNetwork.URLParamEncoding, b: TekCoreNetwork.URLParamEncoding) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
public enum JSONParamEncoding : Alamofire.ParameterEncoding {
  case `default`
  case prettyPrinted
  public func encode(_ urlRequest: Alamofire.URLRequestConvertible, with parameters: Alamofire.Parameters?) throws -> Foundation.URLRequest
  public static func == (a: TekCoreNetwork.JSONParamEncoding, b: TekCoreNetwork.JSONParamEncoding) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
open class TekoBoolCode : Swift.Decodable {
  required public init(from decoder: Swift.Decoder) throws
  public init(code: Swift.Bool?, message: Swift.String?)
  @objc deinit
}
extension TekoBoolCode : TekCoreNetwork.TekoCodeProtocol {
  public typealias ValueType = Swift.Bool
  @objc dynamic open var successCode: Swift.Bool {
    @objc get
  }
  public var code: Swift.Bool? {
    get
  }
  public var message: Swift.String? {
    get
  }
  public var error: Swift.Error? {
    get
  }
}
public typealias APIClientRequestAdapter = Alamofire.RequestAdapter
public typealias APIClientRequestRetryCompletion = Alamofire.RequestRetryCompletion
public protocol APIClientRequestRetrier {
  func shouldRetry(request: Foundation.URLRequest, httpCode: Swift.Int, error: Swift.Error, completion: @escaping TekCoreNetwork.APIClientRequestRetryCompletion)
}
public struct APIClientConfiguration : Alamofire.RequestRetrier {
  public init(sessionConfiguration: Foundation.URLSessionConfiguration, requestConfiguration: TekCoreNetwork.RequestConfigurationProtocol, adapter: TekCoreNetwork.APIClientRequestAdapter? = nil, retrier: TekCoreNetwork.APIClientRequestRetrier? = nil)
  public func should(_ manager: Alamofire.SessionManager, retry request: Alamofire.Request, with error: Swift.Error, completion: @escaping Alamofire.RequestRetryCompletion)
}
open class TekoIntCode : Swift.Decodable {
  required public init(from decoder: Swift.Decoder) throws
  public init(code: Swift.Int?, message: Swift.String?)
  @objc deinit
}
extension TekoIntCode : TekCoreNetwork.TekoCodeProtocol {
  public typealias ValueType = Swift.Int
  @objc dynamic open var successCode: Swift.Int {
    @objc get
  }
  public var code: Swift.Int? {
    get
  }
  public var message: Swift.String? {
    get
  }
  public var error: Swift.Error? {
    get
  }
}
open class TekoStringCode : Swift.Decodable {
  required public init(from decoder: Swift.Decoder) throws
  public init(code: Swift.String?, message: Swift.String?)
  @objc deinit
}
extension TekoStringCode : TekCoreNetwork.TekoCodeProtocol {
  public typealias ValueType = Swift.String
  @objc dynamic open var successCode: Swift.String {
    @objc get
  }
  public var code: Swift.String? {
    get
  }
  public var message: Swift.String? {
    get
  }
  public var error: Swift.Error? {
    get
  }
}
public enum APIResult {
  case success(Swift.Decodable)
  case failure(Swift.Error, Swift.Decodable?)
}
public protocol ParamsContainerRequestProtocol : TekCoreNetwork.CoreRequestProtocol {
  var encoder: TekCoreNetwork.APIParamEncoder { get }
}
public protocol BaseRequestProtocol : TekCoreNetwork.ParamsContainerRequestProtocol {
  associatedtype ResponseType : TekCoreNetwork.BaseResponseProtocol
}
public protocol RequestConfigurationProtocol {
  var mainURL: Foundation.URL { get }
  var accessToken: Swift.String? { get }
  var userAgent: Swift.String? { get }
}
public protocol APIRequestProtocol : Alamofire.URLRequestConvertible {
  var baseRequest: TekCoreNetwork.ParamsContainerRequestProtocol { get }
  var configuration: TekCoreNetwork.RequestConfigurationProtocol { get }
}
extension APIRequestProtocol {
  public func asURLRequest() throws -> Foundation.URLRequest
}
public struct APIRequest<T> : TekCoreNetwork.APIRequestProtocol where T : TekCoreNetwork.BaseRequestProtocol {
  public let baseRequest: TekCoreNetwork.ParamsContainerRequestProtocol
  public let configuration: TekCoreNetwork.RequestConfigurationProtocol
}
public struct RequestBuilder {
}
public protocol CoreAPIManagerProtocol {
  var successRange: Swift.ClosedRange<Swift.Int> { get }
  var sessionManager: Alamofire.SessionManager { get }
  var cancelRequestSupport: Swift.Bool { get }
  func decodeData<T, V>(_ request: T, _ data: Foundation.Data?, httpCode: Swift.Int) -> TekCoreNetwork.APIResult where T : TekCoreNetwork.BaseRequestProtocol, V : Swift.Decodable, V == T.ResponseType
  func cancel()
  func call<T, V>(_ request: T, onSuccess: @escaping (V) -> Swift.Void, onError: @escaping (Swift.Error, V?) -> Swift.Void) where T : TekCoreNetwork.BaseRequestProtocol, V : Swift.Decodable, V == T.ResponseType
  func handleResponseJSON<T, V>(with request: T, response: Alamofire.DataResponse<Any>, completion: @escaping (TekCoreNetwork.APIResult) -> Swift.Void) where T : TekCoreNetwork.BaseRequestProtocol, V : Swift.Decodable, V == T.ResponseType
  func handleResponseJSONWhenSuccess<T, V>(with request: T, response: Foundation.Data?, httpCode: Swift.Int, completion: @escaping (TekCoreNetwork.APIResult) -> Swift.Void) where T : TekCoreNetwork.BaseRequestProtocol, V : Swift.Decodable, V == T.ResponseType
  func handleResponseJSONWhenFail<T, V>(with request: T, response: Foundation.Data?, httpCode: Swift.Int, error: Swift.Error, completion: @escaping (TekCoreNetwork.APIResult) -> Swift.Void) where T : TekCoreNetwork.BaseRequestProtocol, V : Swift.Decodable, V == T.ResponseType
}
extension CoreAPIManagerProtocol {
  public func cancel()
  public func cancelAll()
}
open class CoreAPIManager : TekCoreNetwork.CoreAPIManagerProtocol {
  open var successRange: Swift.ClosedRange<Swift.Int> {
    get
  }
  open var cancelRequestSupport: Swift.Bool {
    get
  }
  public var sessionManager: Alamofire.SessionManager
  public init(configuration: TekCoreNetwork.APIClientConfiguration)
  open func call<T, V>(_ request: T, onSuccess: @escaping (V) -> Swift.Void, onError: @escaping (Swift.Error, V?) -> Swift.Void) where T : TekCoreNetwork.BaseRequestProtocol, V : Swift.Decodable, V == T.ResponseType
  open func handleResponseJSON<T, V>(with request: T, response: Alamofire.DataResponse<Any>, completion: @escaping (TekCoreNetwork.APIResult) -> Swift.Void) where T : TekCoreNetwork.BaseRequestProtocol, V : Swift.Decodable, V == T.ResponseType
  open func decodeData<T, V>(_ request: T, _ data: Foundation.Data?, httpCode: Swift.Int) -> TekCoreNetwork.APIResult where T : TekCoreNetwork.BaseRequestProtocol, V : Swift.Decodable, V == T.ResponseType
  open func handleResponseJSONWhenSuccess<T, V>(with request: T, response: Foundation.Data?, httpCode: Swift.Int, completion: @escaping (TekCoreNetwork.APIResult) -> Swift.Void) where T : TekCoreNetwork.BaseRequestProtocol, V : Swift.Decodable, V == T.ResponseType
  open func handleResponseJSONWhenFail<T, V>(with request: T, response: Foundation.Data?, httpCode: Swift.Int, error: Swift.Error, completion: @escaping (TekCoreNetwork.APIResult) -> Swift.Void) where T : TekCoreNetwork.BaseRequestProtocol, V : Swift.Decodable, V == T.ResponseType
  @objc deinit
}
